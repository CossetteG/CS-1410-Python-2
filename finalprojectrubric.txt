Current layout: 3 Panels with treePanel 0: opened file dessertshop.pyPanel 1: terminal command:
1. Final Project
Problem
This programming project counts as your final exam. You will demonstrate all the programming and computer science skills you’ve mastered throughout 1400 and 1410.
The assignment is to create a program of your choosing. Use concepts and techniques that you’ve learned. Below is a list of suggestions, many of which involve graphics or GUIs, but ultimately you choose which project you will write. Don’t feel obligated to use any of these specific suggestions if it does not work for you.
When you consider your project ideas, keep it as simple as possible. You may want to stretch a little and include features we may not have covered in class, but it’s not required and so be careful with that. If you have questions, ask your instructor for guidance.
You may work with one partner if you choose, but this is optional.
Schedule
Week 8 of the semester: Have your Project Idea approved by your instructor. This can be a paragraph or two. The point is to make sure you are start early enough and follow the Goldilocks Principle: not too small, not too large, just right. In your proposal, state who else you are working with if you do. Both of you should submit the same copy of the proposal in this case. This is graded as an Exercise.
Week 10 of the semester: Submit a proposed design. If a user interface or or GUI is involved, drawings or snapshots must be included. This is graded as an Exercise.
Finals Week: You submit your final project in Codio no later than the last day of final exams.
Project Suggestions
These suggestions are by no means comprehensive or exhaustive, mainly provided for those who may struggle coming up with a good idea. Lots of inspiration and examples exist out on the web.
Games
If you are interested in making a game, check out this list of frameworks to find one you like.
Simulations
If interested in real-time physics simulations, consider WARP.
Other Applications/Software
For other application domains, with some searching you may find frameworks that support what you what to do and meet project requirements as well. One framework you may find interesting is called Processing and specifically Python Mode for Processing
Deal or No Deal
This is a program that simulates the “Deal or No Deal” game show. There are 26 boxes, each containing a different amount of money. The player chooses a single box that he thinks contains the most money. That box is saved until the end of the game. The player then chooses six more boxes and opens them immediately. Each opened box reveals the amount of money in that box. The program dims each amount that is revealed so it’s easy to tell which amounts are still in play. After opening six boxes, the program makes an offer to the player of some amount of money to quit the game. The offer should always be the average of whatever amounts are still in play. The player is then given a choice to take the offer and end the game (“deal”) or to refuse the offer and continue with the game (“no deal”). If the player chooses to continue they are instructed to open five more boxes, after which the program makes the player another offer to quit the game as above. If the player continues, the following rounds then have the player opening four boxes, then three boxes, then two boxes before making another offer. After that, the player opens only one box for each round. Once the player opens the last box they can open the box that they chose and saved at the beginning of the game to see how much money they won. If the player decides to take the deal and quit the game, the program allows the player to open any of the remaining boxes to see what values are contained there, without changing the amount of money the player wins.
Snapshot of Deal or No Deal Game
OOP Version of Turtle Patterns II Project from CS 1400
Much like we did with Random Walk OOP at the beginning of the semester, redo your turtle patterns II project form CS 1400 in OOP style. You may find that you need to add a few things to meet the requirements for 1410, and that is OK.
Possible Advanced Projects
Advanced Games	
chess	flappy bird	checkers
Galaga	Asteroids	2048
Mario	Tower Defense	Basketball Shooting Game
Snake	Pong	Minesweeper
Blackjack	Solitaire	Tetris
FAQs
Q. Do I have to do a game? Especially since this isn’t a game programming class.
A. The simple answer is NO. Do something that interests YOU, not necessarily me or others.
Q. I think this project might be too hard for only my second programming class ever, especially if I have to learn something you haven’t taught us in the class. Do you think that’s realistic?
A. Yes I think you can do it in a reasonable amount of time even if you have to learn something I haven’t taught you in class. Don’t choose a project that will require you to do more than you can handle.
Q. How do I know if a project is too complex to handle?
A. That’s why we have you submit a project idea and a design before you commit to your project.
Q. What if my project uses a platform that does not run in Codio?
A. You still need to submit your source code that you have written in Codio. You also need to provide instructions for how to run it. Pygame and other tools that produce visual displays like the Turtles do run in the same setup as turtles with a remote display. If you need help getting that set up, ask your instructor or IA.
Grading
This project is worth 100 points total, but counts as a project in that category and as an exam in that category for purposes of grading. We use points for each feature in the rubric because of the open-ended nature of the project and because this is the final exam and there won’t be an in-class post-project review. We don’t want to encourage the idea that partial credit for non-compliant code is OK.
Rubric	Total 100 points
Item	Points
Variables, expressions, classes and methods expressions have proper names and proper scope	14
Code uses branches and loops	14
Classes, Methods and Functions: code is NOT copied multiple places in your application	15
Code uses object collections	14
Code uses OOP and Pythonic design principles	15
Code passes all PEP8 style checks	14
Implementation matches the design	14
Programs that have runtime errors or crash or are incomplete earn at most 50%.
Mark as CompletedBack to dashboard
